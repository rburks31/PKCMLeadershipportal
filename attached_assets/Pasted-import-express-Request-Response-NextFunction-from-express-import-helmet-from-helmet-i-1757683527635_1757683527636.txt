import express, { Request, Response, NextFunction } from "express";
import helmet from "helmet";
import compression from "compression";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { errorHandler } from "./middleware/errorHandler";
import rateLimit from "express-rate-limit";

const app = express();

// Security middlewares
app.use(helmet());
app.use(compression());
app.disable("x-powered-by");

// Rate limiting for API endpoints
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100,
  message: "Too many requests from this IP, please try again later"
});

// Body parsing
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: false, limit: "10mb" }));

// Enhanced logging middleware
app.use((req: Request, res: Response, next: NextFunction) => {
  const start = Date.now();
  const { method, path, ip } = req;
  
  res.on("finish", () => {
    const duration = Date.now() - start;
    const { statusCode } = res;
    const contentLength = res.get("Content-Length") || 0;
    
    log(`[${new Date().toISOString()}] ${method} ${path} ${statusCode} ${duration}ms ${contentLength}b - ${ip}`);
  });

  next();
});

(async () => {
  try {
    const server = await registerRoutes(app);
    
    // Use centralized error handling
    app.use(errorHandler);
    
    // Environment-based setup
    if (process.env.NODE_ENV === "development") {
      await setupVite(app, server);
    } else {
      serveStatic(app);
      // Add additional production middlewares
      app.use(apiLimiter);
    }

    const port = parseInt(process.env.PORT || "5000", 10);
    server.listen({ port, host: "0.0.0.0" }, () => {
      log(`🚀 Server running in ${process.env.NODE_ENV} mode on port ${port}`);
      log(`🔐 Security headers enabled`);
      log(`📊 Rate limiting active for API routes`);
    });
  } catch (error) {
    log(`❌ Server startup failed: ${error.message}`);
    process.exit(1);
  }
})();